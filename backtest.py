{
 "cells": [
  {
   "cell_type": "code",
   "execution_count": 12,
   "id": "a832b1b0-c898-4cc6-b3aa-9da567feac8f",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "{\n",
      "  \"best_params\": {\n",
      "    \"lam_over\": 0.01,\n",
      "    \"lam_under\": 0.05,\n",
      "    \"theta\": 0.0001\n",
      "  },\n",
      "  \"router\": {\n",
      "    \"total_cost\": 1113974.4279999998,\n",
      "    \"avg_price\": 222.79488559999996\n",
      "  },\n",
      "  \"baseline\": {\n",
      "    \"best_ask\": {\n",
      "      \"total_cost\": 1114165.0,\n",
      "      \"avg_price\": 222.833\n",
      "    },\n",
      "    \"TWAP\": {\n",
      "      \"total_cost\": 1115324.313860315,\n",
      "      \"avg_price\": 223.06486277206298\n",
      "    },\n",
      "    \"VWAP\": {\n",
      "      \"total_cost\": 1115335.7351223254,\n",
      "      \"avg_price\": 223.06714702446507\n",
      "    }\n",
      "  },\n",
      "  \"savings_bps\": {\n",
      "    \"best_ask\": 1.7104468368703036,\n",
      "    \"TWAP\": 12.103079288596234,\n",
      "    \"VWAP\": 12.205357359739057\n",
      "  }\n",
      "}\n"
     ]
    },
    {
     "data": {
      "image/png": "",
      "text/plain": [
       "<Figure size 640x480 with 1 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "\"\"\"\n",
    "backtest.py\n",
    "Back-test and parameter tuning for a Smart Order Router following Cont & Kukanov static cost model.\n",
    "Implements:\n",
    "  - allocate(order_size, venues, lambda_over, lambda_under, theta_queue) with branch pruning\n",
    "  - compute_cost(split, venues, order_size, lambda_over, lambda_under, theta_queue)\n",
    "  - execute_router(snapshots, params, order_size) helper to consolidate cost logic\n",
    "  - back-test replay over L1 snapshots from l1_day.csv\n",
    "  - simple grid search over (lambda_over, lambda_under, theta_queue)\n",
    "  - baseline strategies: best-ask, TWAP, VWAP\n",
    "  - cumulative-cost plotting for the tuned router\n",
    "\"\"\"\n",
    "import os\n",
    "import sys\n",
    "import json\n",
    "import numpy as np\n",
    "import pandas as pd\n",
    "import matplotlib.pyplot as plt\n",
    "\n",
    "# Venue representation\n",
    "class Venue:\n",
    "    def __init__(self, ask, ask_size, fee, rebate):\n",
    "        self.ask = ask\n",
    "        self.ask_size = ask_size\n",
    "        self.fee = fee\n",
    "        self.rebate = rebate\n",
    "\n",
    "\n",
    "def allocate(order_size, venues, lam_over, lam_under, theta):\n",
    "    \"\"\"\n",
    "    Static Cont-Kukanov split across venues with pruning of infeasible branches.\n",
    "    Falls back to greedy if no exact split sums to order_size.\n",
    "    \"\"\"\n",
    "    n = len(venues)\n",
    "    capacities = [v.ask_size for v in venues]\n",
    "    step = 100 if order_size >= 100 else 1\n",
    "    splits = [[]]\n",
    "\n",
    "    # Build splits with capacity-based pruning\n",
    "    for idx in range(n):\n",
    "        new_splits = []\n",
    "        for alloc in splits:\n",
    "            used = sum(alloc)\n",
    "            needed = order_size - used\n",
    "            if sum(capacities[idx:]) < needed:\n",
    "                continue\n",
    "            max_v = min(needed, capacities[idx])\n",
    "            for q in range(0, max_v + 1, step):\n",
    "                after = used + q\n",
    "                if sum(capacities[idx+1:]) < order_size - after:\n",
    "                    continue\n",
    "                new_splits.append(alloc + [q])\n",
    "        splits = new_splits\n",
    "\n",
    "    # Evaluate costs\n",
    "    best_cost = float('inf')\n",
    "    best_split = None\n",
    "    for alloc in splits:\n",
    "        if sum(alloc) != order_size:\n",
    "            continue\n",
    "        cost = compute_cost(alloc, venues, order_size, lam_over, lam_under, theta)\n",
    "        if cost < best_cost:\n",
    "            best_cost = cost\n",
    "            best_split = alloc\n",
    "\n",
    "    # Fallback greedy\n",
    "    if best_split is None:\n",
    "        rem = order_size\n",
    "        best_split = [0]*n\n",
    "        order = sorted(range(n), key=lambda i: venues[i].ask + venues[i].fee)\n",
    "        for i in order:\n",
    "            take = min(capacities[i], rem)\n",
    "            best_split[i] = take\n",
    "            rem -= take\n",
    "            if rem<=0:\n",
    "                break\n",
    "        if rem>0:\n",
    "            best_split[order[0]] += rem\n",
    "        best_cost = compute_cost(best_split, venues, order_size, lam_over, lam_under, theta)\n",
    "\n",
    "    return best_split, best_cost\n",
    "\n",
    "\n",
    "def compute_cost(split, venues, order_size, lam_over, lam_under, theta):\n",
    "    \"\"\"Compute total expected cost for a proposed allocation split.\"\"\"\n",
    "    executed = 0\n",
    "    cash = 0.0\n",
    "    for i, v in enumerate(venues):\n",
    "        exe = min(split[i], v.ask_size)\n",
    "        executed += exe\n",
    "        cash += exe * (v.ask + v.fee)\n",
    "        cash -= max(split[i] - exe, 0) * v.rebate\n",
    "    under = max(order_size - executed, 0)\n",
    "    over = max(executed - order_size, 0)\n",
    "    return cash + theta*(under+over) + lam_under*under + lam_over*over\n",
    "\n",
    "\n",
    "def load_snapshots(csv_path):\n",
    "    \"\"\"Load L1 feed and aggregate one snapshot per venue per timestamp.\"\"\"\n",
    "    df = pd.read_csv(csv_path, parse_dates=['ts_event'])\n",
    "    df.sort_values('ts_event', inplace=True)\n",
    "    df = df.drop_duplicates(subset=['ts_event','publisher_id'], keep='first')\n",
    "    snapshots = []\n",
    "    for ts, group in df.groupby('ts_event'):\n",
    "        vs = []\n",
    "        for _, row in group.iterrows():\n",
    "            vs.append(Venue(row['ask_px_00'], int(row['ask_sz_00']), 0.003, 0.002))\n",
    "        snapshots.append(vs)\n",
    "    return snapshots\n",
    "\n",
    "\n",
    "def execute_router(snapshots, params, order_size=5000):\n",
    "    \"\"\"\n",
    "    Run the router over snapshots, returning total cash and cumulative cost list.\n",
    "    \"\"\"\n",
    "    rem = order_size\n",
    "    cash = 0.0\n",
    "    cum = []\n",
    "    for vs in snapshots:\n",
    "        if rem<=0:\n",
    "            break\n",
    "        split, _ = allocate(rem, vs, *params)\n",
    "        executed = 0\n",
    "        for i, v in enumerate(vs):\n",
    "            qty = min(split[i], v.ask_size)\n",
    "            cash += qty*(v.ask+v.fee)\n",
    "            cash -= max(split[i]-qty,0)*v.rebate\n",
    "            executed += qty\n",
    "        rem -= executed\n",
    "        cum.append(cash)\n",
    "    if rem>0 and snapshots:\n",
    "        last = snapshots[-1]\n",
    "        best = min(last, key=lambda v: v.ask+v.fee)\n",
    "        cash += rem*(best.ask+best.fee)\n",
    "        cum.append(cash)\n",
    "    return cash, cum\n",
    "\n",
    "\n",
    "def backtest_router(snapshots, params, order_size=5000):\n",
    "    \"\"\"Helper that returns total cost and avg price.\"\"\"\n",
    "    total, _ = execute_router(snapshots, params, order_size)\n",
    "    return total, total/order_size\n",
    "\n",
    "\n",
    "def baseline_best_ask(snapshots, order_size=5000):\n",
    "    vs = snapshots[0]\n",
    "    best = min(vs, key=lambda v:v.ask+v.fee)\n",
    "    cost = order_size*(best.ask+best.fee)\n",
    "    return cost, cost/order_size\n",
    "\n",
    "\n",
    "def baseline_twap(snapshots, order_size=5000):\n",
    "    px = [np.mean([v.ask+v.fee for v in vs]) for vs in snapshots]\n",
    "    avg = np.mean(px)\n",
    "    return order_size*avg, avg\n",
    "\n",
    "\n",
    "def baseline_vwap(snapshots, order_size=5000):\n",
    "    num = sum((v.ask+v.fee)*v.ask_size for vs in snapshots for v in vs)\n",
    "    den = sum(v.ask_size for vs in snapshots for v in vs)\n",
    "    vwap = num/den if den else 0\n",
    "    return order_size*vwap, vwap\n",
    "\n",
    "\n",
    "def plot_cumulative(snapshots, params, order_size=5000):\n",
    "    \"\"\"Plot cumulative cost curve for the router.\"\"\"\n",
    "    _, cum = execute_router(snapshots, params, order_size)\n",
    "    plt.figure()\n",
    "    plt.plot(cum)\n",
    "    plt.xlabel('Snapshot index')\n",
    "    plt.ylabel('Cumulative cash spent')\n",
    "    plt.title('Router cumulative cost over time')\n",
    "    plt.savefig('results.png')\n",
    "\n",
    "\n",
    "def main():\n",
    "    # Determine CSV path\n",
    "    default = '/Users/krx/Downloads/Blockhouse/l1_day.csv'\n",
    "    data_path = default\n",
    "    for a in sys.argv[1:]:\n",
    "        if a.lower().endswith('.csv') and os.path.isfile(a):\n",
    "            data_path = a\n",
    "            break\n",
    "\n",
    "    snapshots = load_snapshots(data_path)\n",
    "\n",
    "    grid = {'lam_over':[0.01,0.05,0.1], 'lam_under':[0.05,0.1,0.2], 'theta':[1e-4,5e-4,1e-3]}\n",
    "    best, best_params, best_res = float('inf'), None, None\n",
    "    for lo in grid['lam_over']:\n",
    "        for lu in grid['lam_under']:\n",
    "            for th in grid['theta']:\n",
    "                cost, avg = backtest_router(snapshots,(lo,lu,th))\n",
    "                if cost<best:\n",
    "                    best, best_params, best_res = cost, (lo,lu,th), (cost,avg)\n",
    "\n",
    "    ba_c, ba_p = baseline_best_ask(snapshots)\n",
    "    tw_c, tw_p = baseline_twap(snapshots)\n",
    "    vw_c, vw_p = baseline_vwap(snapshots)\n",
    "    savings = {\n",
    "        'best_ask': (ba_c-best_res[0])/ba_c*1e4,\n",
    "        'TWAP':     (tw_c-best_res[0])/tw_c*1e4,\n",
    "        'VWAP':     (vw_c-best_res[0])/vw_c*1e4\n",
    "    }\n",
    "\n",
    "    result = {\n",
    "        'best_params': {'lam_over':best_params[0],'lam_under':best_params[1],'theta':best_params[2]},\n",
    "        'router':      {'total_cost':best_res[0],'avg_price':best_res[1]},\n",
    "        'baseline':    {'best_ask':{'total_cost':ba_c,'avg_price':ba_p},'TWAP':{'total_cost':tw_c,'avg_price':tw_p},'VWAP':{'total_cost':vw_c,'avg_price':vw_p}},\n",
    "        'savings_bps': savings\n",
    "    }\n",
    "\n",
    "    print(json.dumps(result,indent=2))\n",
    "    plot_cumulative(snapshots,best_params)\n",
    "\n",
    "if __name__=='__main__':\n",
    "    main()\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "cf776f88-996e-45ef-9f8b-28fad49959e5",
   "metadata": {},
   "outputs": [],
   "source": []
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3 (ipykernel)",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.12.7"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 5
}
